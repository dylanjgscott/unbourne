/**
 * @author Dylan Scott dsco9564
 */

#ifndef help_h
#define help_h 1

void help(char **args);

/* this is pretty ugly i know */
#define HELP_TEXT "Unbourne Shell\n==============\n\nWritten by Dylan Scott dsco9564@uni.sydney.edu.au.\n\nA basic shell which supports I/O redirection and background execution. The shell is invoked by running `myshell`. The shell will then prompt for commands one at a time, interactivly. It is also possible to read commands from a file by giving the file as an argument. For example the command `myshell file` will start the shell in non-interactive mode and read commands from the file named `file`.\n\nOperation and Commands\n----------------------\n\n### Built-in Commands\n\n* `cd`\n\nThe `cd` command is used to change the current working directory.\nFor example the command `cd DIRECTORY` will change the working directory to `DIRECTORY`.`\n\n* `clr`\n\nThe `clr` command is used to clear the screen. It takes no arguments.\nFor example the `clr` command will clear the screen.\n\n* `dir`\n\nThe `dir` command is used to print the contents of a directory. If no arguments are given `dir` will print the contents of the current directory.\nFor example the command `dir DIRECTORY` will list the contents of the directory `DIRECTORY`.\n\n* `environ`\nThe `environ` command will print out the current environment variables. It takes no arguments.\n\n* `echo`\nThe command `echo` prints out any arguments given.\nFor example the command `echo example` will print out `example`.\n\n* `help`\nThe `help` command shows this help page. It takes no arguments.\nFor example issuing the command `help` will show this page.\n\n* `pause`\nThe `pause` command will stop all shell activity until the `enter` key is pressed on the keyboard. It is useful for non-interative shells. It takes no arguments.\nFor example `pause` will halt all activity.\n\n* `quit`\nThe command `quit` will terminate the shell. It takes no arguments.\nFor example `quit` will exit the shell.\n\nInput/Output Redirection\n------------------------\n\nIt is possible to make programs input or output from files rather than read from keyboard or output to screen. This is accomplished using the input and output redirection commands.\n\n* `>`\nThe command `>` is used for output redirection and takes one argument, the name of the file to ouput to. Any existing data in the file is deleted first.\nFor example the command `echo test > file` will write `test` in the file named `file`.\n\n* `>>`\nThe command `> is also used for output redirection and takes one argument, the name of the file to output to but the data is added to the end of the file, preserving the existing contents.\nContinuing from the previous example the command `echo test2 >> file` will append `test2` to the file named `file`. The original contents are preserved.\n\n* `<` \nThe `<` command allows input redirection. It takes one argument, the name of a file and will read the input for a command from that file instead of reading from the keyboard.\nFor example the command `grep test < file` will make the program grep read from the file named `file` instead of from the keyboard.\n\nProgram Environment\n-------------------\n\nThe shell has a set of environment variables. The ones set by the shell itself are below.\n\n* `SHELL`\nThis environment variable is set to the path of the shell itself.\n\n* `PWD`\nThe environment variable `PWD` is set to the current working directory.\n\n* `PARENT`\nThe `PARENT` environment variable is set in all child processes to the path of the shell itself.\n\nBackground Program Execution\n----------------------------\n\nThe shell allows processes to run in the background. This is done by using the `&` symbol at the end of the command.\nFor example the command `sleep 60 &` will execute the `sleep 60` command and then immediatly continue processing new commands.\n"

#endif
